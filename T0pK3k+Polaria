print = function() end
warn = function() end
error = function() return end

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "PolariaUI"
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 600, 0, 400)
mainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
mainFrame.BorderSizePixel = 0

local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    mainFrame.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        update(input)
    end
end)

local tabContainer = Instance.new("Frame", mainFrame)
tabContainer.Size = UDim2.new(1, 0, 0, 30)
tabContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
tabContainer.BorderSizePixel = 0

local contentContainer = Instance.new("Frame", mainFrame)
contentContainer.Size = UDim2.new(1, 0, 1, -30)
contentContainer.Position = UDim2.new(0, 0, 0, 30)
contentContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
contentContainer.BorderSizePixel = 0

local closeButton = Instance.new("TextButton", mainFrame)
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -30, 0, 0)
closeButton.Text = "X"
closeButton.BackgroundColor3 = Color3.fromRGB(80, 0, 0)
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.BorderSizePixel = 0
closeButton.Font = Enum.Font.SourceSansBold

closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

local tabs = {"Home", "Player", "Executor", "Scripts"}
local tabFrames = {}

for i, name in ipairs(tabs) do
    local tabButton = Instance.new("TextButton", tabContainer)
    tabButton.Size = UDim2.new(0, 100, 1, 0)
    tabButton.Position = UDim2.new(0, (i - 1) * 140, 0, 0)
    tabButton.Text = name
    tabButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    tabButton.TextColor3 = Color3.new(1, 1, 1)
    tabButton.BorderSizePixel = 0

    local frame = Instance.new("Frame", contentContainer)
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Visible = i == 1
    tabFrames[name] = frame

    tabButton.MouseButton1Click:Connect(function()
        for _, f in pairs(tabFrames) do f.Visible = false end
        frame.Visible = true
    end)
end

local home = tabFrames["Home"]

local thumbImage = Instance.new("ImageLabel", home)
thumbImage.Size = UDim2.new(0, 150, 0, 150)
thumbImage.Position = UDim2.new(0, 10, 0, 10)
thumbImage.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
thumbImage.BorderColor3 = Color3.fromRGB(140, 0, 255)
thumbImage.BorderSizePixel = 2
thumbImage.ScaleType = Enum.ScaleType.Fit

local content, isReady = Players:GetUserThumbnailAsync(player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size150x150)
thumbImage.Image = content

local info = {
    "Username: " .. player.Name,
    "DisplayName: " .. (player.DisplayName or ""),
    "Account Age: " .. player.AccountAge .. " days",
    "Run time: " .. os.date("%X"),
    "Game Name: " .. game.Name
}

for i, line in ipairs(info) do
    local label = Instance.new("TextLabel", home)
    label.Size = UDim2.new(1, -180, 0, 30) 
    label.Position = UDim2.new(0, 170, 0, 10 + (i - 1) * 35) 
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 22
    label.Text = line
end

local playerTab = tabFrames["Player"]

local playerListFrame = Instance.new("ScrollingFrame", playerTab)
playerListFrame.Size = UDim2.new(0.4, -10, 1, -10)
playerListFrame.Position = UDim2.new(0, 5, 0, 5)
playerListFrame.BackgroundColor3 = Color3.fromRGB(35, 0, 50)
playerListFrame.BorderSizePixel = 0
playerListFrame.ScrollBarThickness = 6
playerListFrame.CanvasSize = UDim2.new(0, 0, 0, 0)

local playerListLayout = Instance.new("UIListLayout", playerListFrame)
playerListLayout.SortOrder = Enum.SortOrder.LayoutOrder
playerListLayout.Padding = UDim.new(0, 4)

playerListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    playerListFrame.CanvasSize = UDim2.new(0, 0, 0, playerListLayout.AbsoluteContentSize.Y)
end)

local detailFrame = Instance.new("Frame", playerTab)
detailFrame.Size = UDim2.new(0.6, -10, 1, -10)
detailFrame.Position = UDim2.new(0.4, 5, 0, 5)
detailFrame.BackgroundColor3 = Color3.fromRGB(25, 0, 40)
detailFrame.BorderSizePixel = 0

local profileImage = Instance.new("ImageLabel", detailFrame)
profileImage.Size = UDim2.new(0, 100, 0, 100)
profileImage.Position = UDim2.new(0, 10, 0, 10)
profileImage.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
profileImage.BorderColor3 = Color3.fromRGB(140, 0, 255)

local nameLabel = Instance.new("TextLabel", detailFrame)
nameLabel.Size = UDim2.new(1, -120, 0, 30)
nameLabel.Position = UDim2.new(0, 120, 0, 10)
nameLabel.BackgroundTransparency = 1
nameLabel.TextColor3 = Color3.new(1, 1, 1)
nameLabel.TextScaled = true
nameLabel.TextXAlignment = Enum.TextXAlignment.Left
nameLabel.Font = Enum.Font.SourceSansBold
nameLabel.Text = "Choose player you want."

local buttonHolder = Instance.new("Frame", detailFrame)
buttonHolder.Size = UDim2.new(1, -20, 0, 120)
buttonHolder.Position = UDim2.new(0, 10, 0, 120)
buttonHolder.BackgroundTransparency = 1

local buttonLayout = Instance.new("UIListLayout", buttonHolder)
buttonLayout.Padding = UDim.new(0, 5)
buttonLayout.FillDirection = Enum.FillDirection.Horizontal
buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
buttonLayout.SortOrder = Enum.SortOrder.LayoutOrder
buttonLayout.Wraps = true

local function createActionButton(name, callback)
    local button = Instance.new("TextButton", buttonHolder)
    button.Size = UDim2.new(0, 90, 0, 30)
    button.Text = name
    button.BackgroundColor3 = Color3.fromRGB(100, 0, 100)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.BorderSizePixel = 0
    button.MouseButton1Click:Connect(callback)
end

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local selectedPlayer = nil

local function selectPlayer(p)
	selectedPlayer = p

	if p then
		nameLabel.Text = p.Name
		local thumb = Players:GetUserThumbnailAsync(p.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size100x100)
		profileImage.Image = thumb
	else
		nameLabel.Text = "Server"
		profileImage.Image = ""
	end

	task.wait()
for _, child in ipairs(buttonHolder:GetChildren()) do
	if child:IsA("TextButton") then
		child:Destroy()
	end
end

    createActionButton("Fling", function()
    local function SkidFling(TargetPlayer)
    local Character = player.Character
    local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
    local RootPart = Humanoid and Humanoid.RootPart

    local TCharacter = TargetPlayer.Character
    local THumanoid = TCharacter and TCharacter:FindFirstChildOfClass("Humanoid")
    local TRootPart = THumanoid and THumanoid.RootPart
    local THead = TCharacter and TCharacter:FindFirstChild("Head")
    local Accessory = TCharacter and TCharacter:FindFirstChildOfClass("Accessory")
    local Handle = Accessory and Accessory:FindFirstChild("Handle")

    if Character and Humanoid and RootPart then
        if RootPart.Velocity.Magnitude < 50 then
            getgenv().OldPos = RootPart.CFrame
        end
        if THumanoid and THumanoid.Sit then return end

        if THead then
            workspace.CurrentCamera.CameraSubject = THead
        elseif Handle then
            workspace.CurrentCamera.CameraSubject = Handle
        else
            workspace.CurrentCamera.CameraSubject = THumanoid
        end

        if not TCharacter:FindFirstChildWhichIsA("BasePart") then return end

        local function FPos(BasePart, Pos, Ang)
            RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
            Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
            RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
            RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
        end

        local function SFBasePart(BasePart)
            local TimeToWait = 2
            local Time = tick()
            local Angle = 0

            repeat
                if RootPart and THumanoid then
                    if BasePart.Velocity.Magnitude < 50 then
                        Angle = Angle + 100
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                    else
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
                    end
                else
                    break
                end
            until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
        end

        workspace.FallenPartsDestroyHeight = 0/0

        local BV = Instance.new("BodyVelocity")
        BV.Name = "EpixVel"
        BV.Parent = RootPart
        BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
        BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)

        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)

        if TRootPart and THead then
            if (TRootPart.Position - THead.Position).Magnitude > 5 then
                SFBasePart(THead)
            else
                SFBasePart(TRootPart)
            end
        elseif TRootPart then
            SFBasePart(TRootPart)
        elseif THead then
            SFBasePart(THead)
        elseif Handle then
            SFBasePart(Handle)
        else
            return
        end

        BV:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid

        repeat
            RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
            Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
            Humanoid:ChangeState("GettingUp")
            for _, x in ipairs(Character:GetChildren()) do
                if x:IsA("BasePart") then
                    x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                end
            end
            task.wait()
        until (RootPart.Position - getgenv().OldPos.Position).Magnitude < 25

        workspace.FallenPartsDestroyHeight = getgenv().FPDH
    end
end

    local TargetPlayer = selectedPlayer
    if not TargetPlayer or TargetPlayer == player then return end

    local Character = player.Character
    local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
    local RootPart = Humanoid and Humanoid.RootPart

    local TCharacter = TargetPlayer.Character
    local THumanoid = TCharacter and TCharacter:FindFirstChildOfClass("Humanoid")
    local TRootPart = THumanoid and THumanoid.RootPart
    local THead = TCharacter and TCharacter:FindFirstChild("Head")
    local Accessory = TCharacter and TCharacter:FindFirstChildOfClass("Accessory")
    local Handle = Accessory and Accessory:FindFirstChild("Handle")

    if Character and Humanoid and RootPart then
        if RootPart.Velocity.Magnitude < 50 then
            getgenv().OldPos = RootPart.CFrame
        end
        if THumanoid and THumanoid.Sit then return end

        if THead then
            workspace.CurrentCamera.CameraSubject = THead
        elseif Handle then
            workspace.CurrentCamera.CameraSubject = Handle
        else
            workspace.CurrentCamera.CameraSubject = THumanoid
        end

        if not TCharacter:FindFirstChildWhichIsA("BasePart") then return end

        local function FPos(BasePart, Pos, Ang)
            RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
            Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
            RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
            RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
        end

        local function SFBasePart(BasePart)
            local TimeToWait = 2
            local Time = tick()
            local Angle = 0

            repeat
                if RootPart and THumanoid then
                    if BasePart.Velocity.Magnitude < 50 then
                        Angle += 100
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                        FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                    else
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
                    end
                else
                    break
                end
            until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
        end

        workspace.FallenPartsDestroyHeight = 0/0

        local BV = Instance.new("BodyVelocity")
        BV.Name = "EpixVel"
        BV.Parent = RootPart
        BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
        BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)

        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)

        if TRootPart and THead then
            if (TRootPart.Position - THead.Position).Magnitude > 5 then
                SFBasePart(THead)
            else
                SFBasePart(TRootPart)
            end
        elseif TRootPart then
            SFBasePart(TRootPart)
        elseif THead then
            SFBasePart(THead)
        elseif Handle then
            SFBasePart(Handle)
        else
            return
        end

        BV:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid

        repeat
            RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
            Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
            Humanoid:ChangeState("GettingUp")
            for _, x in ipairs(Character:GetChildren()) do
                if x:IsA("BasePart") then
                    x.Velocity = Vector3.zero
                    x.RotVelocity = Vector3.zero
                end
            end
            task.wait()
        until (RootPart.Position - getgenv().OldPos.Position).Magnitude < 25
getgenv().FPDH = getgenv().FPDH or -500  

local height = tonumber(getgenv().FPDH)
if height then
    workspace.FallenPartsDestroyHeight = height
else
    workspace.FallenPartsDestroyHeight = -500
end
    end
end)

createActionButton("Spin", function()
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    local hrp = char:FindFirstChild("HumanoidRootPart")
    local camera = workspace.CurrentCamera
    if not selectedPlayer then return end
    local targetChar = selectedPlayer.Character
    if not humanoid or not hrp or not targetChar then return end
    local targetHead = targetChar:FindFirstChild("Head")
    if not targetHead then return end

    _G.isSpinning = _G.isSpinning or {}

    if _G.isSpinning[selectedPlayer] then
        local data = _G.isSpinning[selectedPlayer]
        if data.connection then
            data.connection:Disconnect()
        end

        camera.CameraSubject = humanoid
        camera.CameraType = Enum.CameraType.Custom

        humanoid.PlatformStand = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)

        if data.originalCFrame then
            hrp.CFrame = data.originalCFrame
            char:SetPrimaryPartCFrame(data.originalCFrame)
        end

        _G.isSpinning[selectedPlayer] = nil
        return
    end

    local originalCFrame = hrp.CFrame
    humanoid.PlatformStand = true
    hrp.Anchored = false

    camera.CameraSubject = targetHead
    camera.CameraType = Enum.CameraType.Custom

    local runService = game:GetService("RunService")
    local angle = 0

    local connection
    connection = runService.Heartbeat:Connect(function()
        if not char.Parent or not targetChar.Parent or _G.isSpinning[selectedPlayer] == nil then
            connection:Disconnect()
            humanoid.PlatformStand = false
            camera.CameraSubject = humanoid
            camera.CameraType = Enum.CameraType.Custom
            return
        end

        angle = (angle + 30) % 360
        local radians = math.rad(angle)
        local offset = Vector3.new(math.cos(radians) * 3, 0, math.sin(radians) * 3)

        local newPos = targetHead.Position + offset
        hrp.CFrame = CFrame.new(newPos, targetHead.Position)
    end)

    _G.isSpinning[selectedPlayer] = {
        connection = connection,
        originalCFrame = originalCFrame,
    }
end)

local activeESP = {}

createActionButton("ESP", function()
    if not selectedPlayer or selectedPlayer == player then return end

    local function removeESP(char)
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                for _, child in ipairs(part:GetChildren()) do
                    if child:IsA("BoxHandleAdornment") and child.Name == "ESPBox" then
                        child:Destroy()
                    end
                end
            end
        end

        local head = char:FindFirstChild("Head")
        if head then
            for _, adorn in ipairs(head:GetChildren()) do
                if adorn:IsA("BillboardGui") and adorn.Name == "NameTagESP" then
                    adorn:Destroy()
                end
            end
        end
    end

    local function applyESP(char)
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                local box = Instance.new("BoxHandleAdornment")
                box.Name = "ESPBox"
                box.Adornee = part
                box.AlwaysOnTop = true
                box.ZIndex = 10
                box.Size = part.Size + Vector3.new(0.1, 0.1, 0.1)
                box.Transparency = 0.25
                box.Color3 = Color3.new(1, 0, 0)
                box.Parent = part
            end
        end

        local head = char:FindFirstChild("Head")
        if head then
            local tag = Instance.new("BillboardGui")
            tag.Name = "NameTagESP"
            tag.Adornee = head
            tag.Size = UDim2.new(0, 200, 0, 50)
            tag.StudsOffset = Vector3.new(0, 2.5, 0)
            tag.AlwaysOnTop = true

            local text = Instance.new("TextLabel")
            text.Size = UDim2.new(1, 0, 1, 0)
            text.BackgroundTransparency = 1
            text.TextColor3 = Color3.new(1, 1, 0)
            text.TextStrokeTransparency = 0.5
            text.Font = Enum.Font.SourceSansBold
            text.TextScaled = true
            text.Text = selectedPlayer.DisplayName .. " (@" .. selectedPlayer.Name .. ")"
            text.Parent = tag

            tag.Parent = head
        end
    end

    if activeESP[selectedPlayer] then
        if selectedPlayer.Character then
            removeESP(selectedPlayer.Character)
        end

    
        if activeESP[selectedPlayer].connection then
            activeESP[selectedPlayer].connection:Disconnect()
        end

        activeESP[selectedPlayer] = nil
    else
       
        if selectedPlayer.Character then
            applyESP(selectedPlayer.Character)
        end

        local conn = selectedPlayer.CharacterAdded:Connect(function(char)
            applyESP(char)
        end)

        activeESP[selectedPlayer] = {
            connection = conn
        }
    end
end)

createActionButton("Aim lock", function()
    local localPlayer = game.Players.LocalPlayer
    local character = localPlayer.Character
    local camera = workspace.CurrentCamera

    if not character or not character:FindFirstChild("HumanoidRootPart") then
        warn("nil character")
        return
    end

    if not selectedPlayer or not selectedPlayer.Character or not selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
        warn("unexpect player")
        return
    end

    if _G.AimlockConnection then
        _G.AimlockConnection:Disconnect()
        _G.AimlockConnection = nil
        _G.AimlockTarget = nil
        warn("unaimlocked")
        return
    end

    _G.AimlockTarget = selectedPlayer

    _G.AimlockConnection = game:GetService("RunService").RenderStepped:Connect(function()
        if not character or not character:FindFirstChild("HumanoidRootPart") then return end
        if not _G.AimlockTarget or not _G.AimlockTarget.Character or not _G.AimlockTarget.Character:FindFirstChild("HumanoidRootPart") then return end

        local myHRP = character.HumanoidRootPart
        local targetHRP = _G.AimlockTarget.Character.HumanoidRootPart

        local myPos = myHRP.Position
        local targetPos = targetHRP.Position

        local direction = Vector3.new(targetPos.X - myPos.X, 0, targetPos.Z - myPos.Z)
        if direction.Magnitude > 0 then
            direction = direction.Unit
            myHRP.CFrame = CFrame.new(myPos, myPos + direction)
        end

    end)

    warn("aimlock person:", _G.AimlockTarget.Name)
end)

local bringEnabled = false
local runService = game:GetService("RunService")
local localPlayer = game.Players.LocalPlayer

local connection 

createActionButton("Character Bring", function()
    bringEnabled = not bringEnabled

    if bringEnabled then
        connection = runService.RenderStepped:Connect(function()
            local targetPlayer = selectedPlayer
            if not targetPlayer or targetPlayer == localPlayer then return end

            local localChar = localPlayer.Character
            local targetChar = targetPlayer.Character
            if not localChar or not targetChar then return end

            local localHRP = localChar:FindFirstChild("HumanoidRootPart")
            local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
            if not localHRP or not targetHRP then return end

            local frontPos = localHRP.CFrame.Position + (localHRP.CFrame.LookVector * 2)
            local newCFrame = CFrame.new(frontPos, frontPos + localHRP.CFrame.LookVector)
            targetHRP.CFrame = newCFrame
        end)
    else

        if connection then
            connection:Disconnect()
            connection = nil
        end
    end
end)

local frozenPlayers = {}

createActionButton("Hitbox Freeze", function()
    if not selectedPlayer or not selectedPlayer.Character then return end

    local character = selectedPlayer.Character
    local isFrozen = frozenPlayers[selectedPlayer] or false

    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            part.Anchored = not isFrozen
        end
    end

    frozenPlayers[selectedPlayer] = not isFrozen
end)

createActionButton("Reality pov", function()
    local player = game.Players.LocalPlayer
    local camera = workspace.CurrentCamera
    if not selectedPlayer then return end
    local targetChar = selectedPlayer.Character
    if not targetChar then return end
    local targetHead = targetChar:FindFirstChild("Head")
    if not targetHead then return end

    _G.isFirstPersonLock = _G.isFirstPersonLock or {}

    if _G.isFirstPersonLock[selectedPlayer] then
        local data = _G.isFirstPersonLock[selectedPlayer]
        if data.connection then
            data.connection:Disconnect()
        end

        camera.CameraType = Enum.CameraType.Custom
        camera.CameraSubject = player.Character and player.Character:FindFirstChildOfClass("Humanoid") or nil

        _G.isFirstPersonLock[selectedPlayer] = nil
        return
    end

    camera.CameraType = Enum.CameraType.Custom
    camera.CameraSubject = targetChar:FindFirstChildOfClass("Humanoid")

    local runService = game:GetService("RunService")
    local connection
    connection = runService.RenderStepped:Connect(function()
        if not player.Character or not selectedPlayer or not selectedPlayer.Character then
            camera.CameraSubject = player.Character and player.Character:FindFirstChildOfClass("Humanoid") or nil
            camera.CameraType = Enum.CameraType.Custom
            if connection then connection:Disconnect() end
            _G.isFirstPersonLock[selectedPlayer] = nil
            return
        end

        local lookVector = camera.CFrame.LookVector
        local camPos = targetHead.Position + (lookVector * 0.5) 

        camera.CFrame = CFrame.new(camPos, camPos + lookVector)
    end)

    _G.isFirstPersonLock[selectedPlayer] = {
        connection = connection,
    }
end)

createActionButton("View pov", function()
    local camera = workspace.CurrentCamera
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    if not selectedPlayer then return end

    if camera.CameraSubject == (selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Head")) then

        if player.Character and player.Character:FindFirstChild("Head") then
            camera.CameraSubject = player.Character.Head
            camera.CameraType = Enum.CameraType.Custom
        end

        if rotateConnection then
            rotateConnection:Disconnect()
            rotateConnection = nil
        end
    else
        local targetChar = selectedPlayer.Character
        local targetHead = targetChar and targetChar:FindFirstChild("Head")
        if targetHead then
            camera.CameraSubject = targetHead
            camera.CameraType = Enum.CameraType.Custom

            if rotateConnection then
                rotateConnection:Disconnect()
            end

            rotateConnection = RunService.RenderStepped:Connect(function()
            end)
        end
    end
end)

createActionButton("Bring kill", function()
    bringEnabled = not bringEnabled

    local toggle = true
    local heartbeatTask
    if bringEnabled then
        heartbeatTask = task.spawn(function()
            while bringEnabled do
                local targetPlayer = selectedPlayer
                if not targetPlayer or targetPlayer == localPlayer then task.wait(0.2) continue end

                local localChar = localPlayer.Character
                local targetChar = targetPlayer.Character
                if not localChar or not targetChar then task.wait(0.2) continue end

                local localHRP = localChar:FindFirstChild("HumanoidRootPart")
                local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
                if not localHRP or not targetHRP then task.wait(0.2) continue end

                local distance = toggle and 7 or 2
                toggle = not toggle

                local frontPos = localHRP.CFrame.Position + (localHRP.CFrame.LookVector * distance)
                local newCFrame = CFrame.new(frontPos, frontPos + localHRP.CFrame.LookVector)
                targetHRP.CFrame = newCFrame

                task.wait(0.001)
            end
        end)
    else
        bringEnabled = false
    end
end)

createActionButton("FTI Kill", function()
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    local hrp = character:FindFirstChild("HumanoidRootPart")

    -- 전역 상태 초기화
    _G.FTI_Toggled = _G.FTI_Toggled or false
    _G.FTI_Connection = _G.FTI_Connection or nil
    _G.FTI_OriginalCFrame = _G.FTI_OriginalCFrame or nil

    local function getBodyParts(character)
        local parts = {}
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") and not part:IsA("Accessory") then
                table.insert(parts, part)
            end
        end
        return parts
    end

    local function startTouchLoop()
        if not selectedPlayer or not selectedPlayer.Character then return end

        -- 위치 저장
        if hrp then
            _G.FTI_OriginalCFrame = hrp.CFrame
        end

        local targetParts = getBodyParts(selectedPlayer.Character)

        _G.FTI_Connection = task.spawn(function()
            while _G.FTI_Toggled and localPlayer.Character and (localPlayer.Character:FindFirstChild("RightHand") or localPlayer.Character:FindFirstChild("Right Arm")) do
                local arm = localPlayer.Character:FindFirstChild("RightHand") or localPlayer.Character:FindFirstChild("Right Arm")
                for _, part in ipairs(targetParts) do
                    firetouchinterest(arm, part, 0)
                    task.wait(0.05)
                    firetouchinterest(arm, part, 1)
                end
                task.wait(0.1)
            end
        end)
    end

    local function stopTouchLoop()
        _G.FTI_Toggled = false
        if _G.FTI_Connection then
            task.cancel(_G.FTI_Connection)
            _G.FTI_Connection = nil
        end

        -- 위치 복구
        local char = localPlayer.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if _G.FTI_OriginalCFrame and hrp then
            hrp.CFrame = _G.FTI_OriginalCFrame
        end
        _G.FTI_OriginalCFrame = nil
    end

    -- 토글
    if not _G.FTI_Toggled then
        _G.FTI_Toggled = true
        startTouchLoop()
    else
        stopTouchLoop()
    end
end)

createActionButton("loopgoto", function()
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")

    local localPlayer = Players.LocalPlayer
    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    local root = character:FindFirstChild("HumanoidRootPart")
    if not root or not selectedPlayer then return end

    _G._following = _G._following or false
    _G._savedCFrame = _G._savedCFrame or nil
    _G._followConnection = _G._followConnection or nil

    if not _G._following then
        _G._following = true
        _G._savedCFrame = root.CFrame

        _G._followConnection = RunService.Heartbeat:Connect(function()
            local targetChar = selectedPlayer.Character
            local targetRoot = targetChar and targetChar:FindFirstChild("HumanoidRootPart")
            if targetRoot and root then
                root.CFrame = targetRoot.CFrame + Vector3.new(0, 0, 2)
            end
        end)
    else
        _G._following = false

        if _G._followConnection then
            _G._followConnection:Disconnect()
            _G._followConnection = nil
        end

        if _G._savedCFrame then
            root.CFrame = _G._savedCFrame
            _G._savedCFrame = nil
        end
    end
end)

local savedPositions = {}

createActionButton("goto", function()
    if not selectedPlayer then return end
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    local targetCharacter = selectedPlayer.Character

    if character and character:FindFirstChild("HumanoidRootPart") then
        savedPositions["GOTO"] = character.HumanoidRootPart.CFrame
        print("현재 위치 GOTO로 저장됨")
    end

    if character and character:FindFirstChild("HumanoidRootPart") and targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = targetCharacter.HumanoidRootPart.CFrame * CFrame.new(0, 3, 0)
        print("선택 플레이어에게 텔레포트 완료")
    end
end)

createActionButton("goto back", function()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character

    if character and character:FindFirstChild("HumanoidRootPart") and savedPositions["GOTO"] then
        character.HumanoidRootPart.CFrame = savedPositions["GOTO"]
        print("저장된 GOTO 위치로 복귀 완료")
    else
        print("저장된 GOTO 위치가 없습니다.")
    end
end)
end

if character and character:FindFirstChild("HumanoidRootPart") and targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = targetCharacter.HumanoidRootPart.CFrame * CFrame.new(0, 3, 0)
    end

local function addPlayerToList(p)
    if p == player then return end

    for _, child in ipairs(playerListFrame:GetChildren()) do
        if child:IsA("TextButton") and child.Text == p.Name then
            return
        end
    end

    local button = Instance.new("TextButton", playerListFrame)
    button.Size = UDim2.new(1, -10, 0, 30)
    button.Text = p.Name
    button.BackgroundColor3 = Color3.fromRGB(70, 0, 100)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.BorderSizePixel = 0
    button.MouseButton1Click:Connect(function()
        selectPlayer(p)
    end)
	local playerButtons = {}

local function createPlayerButton(p)
	local button = Instance.new("TextButton", playerListFrame)
	button.Size = UDim2.new(1, -10, 0, 30)
	button.Text = p.Name
	button.BackgroundColor3 = Color3.fromRGB(100, 0, 150)
	button.TextColor3 = Color3.new(1, 1, 1)
	button.BorderSizePixel = 0
	button.LayoutOrder = p.UserId

	button.MouseButton1Click:Connect(function()
		selectPlayer(p)
	end)

	playerButtons[p.UserId] = button
end

for _, p in ipairs(Players:GetPlayers()) do
	if p ~= player then
		createPlayerButton(p)
	end
end

Players.PlayerAdded:Connect(function(p)
	createPlayerButton(p)
end)

Players.PlayerRemoving:Connect(function(p)
	local button = playerButtons[p.UserId]
	if button and button.Parent then
		button:Destroy()
	end
	playerButtons[p.UserId] = nil
end)

local Players = game:GetService("Players")

Players.PlayerRemoving:Connect(function(removedPlayer)
	for _, button in ipairs(playerListFrame:GetChildren()) do
		if button:IsA("TextButton") and button.Text == removedPlayer.Name then
			button:Destroy()
		end
	end

	if selectedPlayer == removedPlayer then
		selectPlayer(nil)
	end
end)

local function refreshPlayerList()
	for _, child in ipairs(playerListFrame:GetChildren()) do
		if child:IsA("TextButton") and child ~= serverButton then
			child:Destroy()
		end
	end

	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= player then 
			local button = Instance.new("TextButton")
			button.Size = UDim2.new(1, -10, 0, 30)
			button.Text = p.Name
			button.BackgroundColor3 = Color3.fromRGB(70, 0, 120)
			button.TextColor3 = Color3.new(1, 1, 1)
			button.BorderSizePixel = 0
			button.Parent = playerListFrame

			button.MouseButton1Click:Connect(function()
				selectPlayer(p)
			end)
		end
	end
end

refreshPlayerList()

Players.PlayerAdded:Connect(refreshPlayerList)
Players.PlayerRemoving:Connect(function()
	refreshPlayerList()
end)

local connected = false

if not connected then
    Players.PlayerAdded:Connect(refreshPlayerList)
    Players.PlayerRemoving:Connect(refreshPlayerList)
    connected = true
end
Players.PlayerAdded:Connect(refreshPlayerList)
Players.PlayerRemoving:Connect(refreshPlayerList)

local function refreshPlayerList()
    print("Refreshing Player List...")

    for _, child in ipairs(playerListFrame:GetChildren()) do
        if child:IsA("TextButton") and child ~= serverButton then
            child:Destroy()
        end
    end

    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= Players.LocalPlayer then
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(1, -10, 0, 30)
            btn.Text = p.Name
            btn.BackgroundColor3 = Color3.fromRGB(80, 0, 100)
            btn.TextColor3 = Color3.new(1, 1, 1)
            btn.BorderSizePixel = 0
            btn.Parent = playerListFrame

            btn.MouseButton1Click:Connect(function()
                selectPlayer(p)
            end)
        end
    end
end

Players.PlayerAdded:Connect(function()
    task.wait(0.1)
    refreshPlayerList()
end)

Players.PlayerRemoving:Connect(function()
    task.wait(0.1)
    refreshPlayerList()
end)

refreshPlayerList()
end

local executorTab = tabFrames["Executor"]

local consoleFrame = Instance.new("ScrollingFrame", executorTab)
consoleFrame.Size = UDim2.new(1, -20, 0.4, -50)
consoleFrame.Position = UDim2.new(0, 10, 0.55, 10)
consoleFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
consoleFrame.BorderSizePixel = 0
consoleFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
consoleFrame.ScrollBarThickness = 6

local consoleLayout = Instance.new("UIListLayout", consoleFrame)
consoleLayout.SortOrder = Enum.SortOrder.LayoutOrder
consoleLayout.Padding = UDim.new(0, 2)

local inputBox = Instance.new("TextBox", executorTab)
inputBox.Size = UDim2.new(1, -20, 0.4, -10)
inputBox.Position = UDim2.new(0, 10, 0, 10)
inputBox.MultiLine = true
inputBox.TextWrapped = true
inputBox.ClearTextOnFocus = false
inputBox.Text = "-- Luau code here"
inputBox.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
inputBox.TextColor3 = Color3.new(1, 1, 1)
inputBox.Font = Enum.Font.Code
inputBox.TextSize = 16

local runButton = Instance.new("TextButton", executorTab)
runButton.Size = UDim2.new(0, 100, 0, 40)
runButton.Position = UDim2.new(1, -110, 1, -50)
runButton.Text = "Execute"
runButton.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
runButton.TextColor3 = Color3.new(1, 1, 1)
runButton.Font = Enum.Font.SourceSansBold
runButton.TextSize = 18

local statusLabel = Instance.new("TextLabel", executorTab)
statusLabel.Size = UDim2.new(0, 180, 0, 40)
statusLabel.Position = UDim2.new(0, 10, 1, -50)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
statusLabel.Font = Enum.Font.SourceSansBold
statusLabel.TextSize = 18
statusLabel.Text = "Execute on : client"
statusLabel.Visible = true

local function addConsoleMessage(text, color)
	local msg = Instance.new("TextLabel")
	msg.Size = UDim2.new(1, -10, 0, 20)
	msg.BackgroundTransparency = 1
	msg.TextColor3 = color or Color3.new(1, 1, 1)
	msg.Font = Enum.Font.Code
	msg.TextSize = 14
	msg.TextXAlignment = Enum.TextXAlignment.Left
	msg.Text = text
	msg.Parent = consoleFrame

	task.wait()
	consoleFrame.CanvasSize = UDim2.new(0, 0, 0, consoleLayout.AbsoluteContentSize.Y + 10)
	consoleFrame.CanvasPosition = Vector2.new(0, consoleFrame.CanvasSize.Y.Offset)
end

_G.logToConsole = function(text, messageType)
	local colorMap = {
		info = Color3.fromRGB(200, 200, 200),
		warn = Color3.fromRGB(255, 200, 0),
		error = Color3.fromRGB(255, 100, 100),
		runtime = Color3.fromRGB(255, 50, 50),
		compile = Color3.fromRGB(255, 0, 0)
	}
	addConsoleMessage("[" .. messageType .. "] " .. text, colorMap[messageType] or Color3.fromRGB(255, 255, 255))
end

runButton.MouseButton1Click:Connect(function()
	local code = inputBox.Text

	local env = setmetatable({}, {__index = getfenv()})

	env.print = function(...)
		local args = {...}
		local text = ""
		for i, v in ipairs(args) do
			text = text .. tostring(v)
			if i < #args then
				text = text .. "\t"
			end
		end
		_G.logToConsole(text, "info")
	end

	env.warn = function(...)
		local args = {...}
		local text = "[warn] "
		for i, v in ipairs(args) do
			text = text .. tostring(v)
			if i < #args then
				text = text .. "\t"
			end
		end
		_G.logToConsole(text, "warn")
	end

	env.error = function(msg)
		_G.logToConsole(tostring(msg), "error")
	end

	local func, compileErr = loadstring(code)
	if func then
		setfenv(func, env)
		task.spawn(function()
			local success, runtimeErr = pcall(func)
			if not success then
				_G.logToConsole(runtimeErr, "runtime")
			end
		end)
	else
		_G.logToConsole(compileErr, "compile")
	end
end)

local scriptsTab = tabFrames["Scripts"]

local scriptList = {
    {
        Name = "Fe seraphic Blade",
        Code = [[
			print = function() end
warn = function() end
error = function() return end
            loadstring(game:HttpGet("https://pastefy.app/59mJGQGe/raw"))()
        ]]
    },
    {
        Name = "RC7",
        Code = [[
			print = function() end
warn = function() end
error = function() return end
            loadstring(game:HttpGet("https://scriptblox.com/raw/Universal-Script-RC7-7488"))()
        ]]
    },
    {
        Name = "Polaria",
        Code = [[
			print = function() end
warn = function() end
error = function() return end
            loadstring(game:HttpGet("https://pastefy.app/cDHeL11e/raw"))()
        ]]
    },
    {
        Name = "TSB star glitcher(any character)",
        Code = [[
			print = function() end
warn = function() end
error = function() return end
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Reapvitalized/TSB/refs/heads/main/SG_DEMO.lua"))()
        ]]
    },
    {
        Name = "Rochips universal",
        Code = [[
			print = function() end
warn = function() end
error = function() return end
            if "you wanna use rochips universal" then
	local z_x,z_z="gzrux646yj/raw/main.ts","https://glot.io/snippets/"
	local im,lonely,z_c=task.wait,game,loadstring
	z_c(lonely:HttpGet(z_z..""..z_x))()
	return ("This will load in about 2 - 30 seconds" or "according to your device and executor")
end


        ]]
    },
    {
        Name = "prizz life",
        Code = [[
			print = function() end
warn = function() end
error = function() return end
            loadstring(game:HttpGet("https://raw.githubusercontent.com/RuMinGay/prizzlifeomgboy/refs/heads/main/prizzlifeomg"))()
        ]]
    },
        {
        Name = "T0PK3K old -- 얘는 콘솔에 뭐 남음",
        Code = [[
			print = function() end
warn = function() end
error = function() return end
            loadstring(game:GetObjects('rbxassetid://376634699')[1].Source)()
        ]]
    }
}

local layout = Instance.new("UIListLayout")
layout.Padding = UDim.new(0, 10)
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Parent = scriptsTab

for _, entry in ipairs(scriptList) do
    local button = Instance.new("TextButton", scriptsTab)
    button.Size = UDim2.new(1, -20, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 10)
    button.Text = entry.Name
    button.BackgroundColor3 = Color3.fromRGB(0, 80, 130)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 18

    button.MouseButton1Click:Connect(function()
        local func, err = loadstring(entry.Code)
        if func then
            task.spawn(func)
        else
            print("")
        end
    end)

for _, p in ipairs(Players:GetPlayers()) do addPlayerToList(p) end
Players.PlayerAdded:Connect(addPlayerToList)
end
